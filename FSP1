### Autor: Carlos Eduardo Gonzalez. Equipo de Modelacion. 


sna_carlos<- function(transmission_rate, node_number, name,seed_num, sce,
                      range_yields,range_costos,prob_success,elas_supply,elas_demand,
                      prod_prices, depre_rate,discount_rate,q,
                      cre_exo){
      g<- igraph::barabasi.game(n = node_number) 
      coins<-c(1,0)
      probabilities = c(transmission_rate, 1-transmission_rate)
      graph_name= name
      seed_num = seed_num
      set.seed(20140301)
      
      diffusers = sample(V(g),seed_num) 
      infected =list()
      infected[[1]]= diffusers
      
      ### set the color
      E(g)$color = "grey"
      V(g)$color = "white"
      png(paste(path,sce,"_sna_sf.png", sep = ""),width = 800, height = 600)
      layout.old = layout.fruchterman.reingold(g, niter = 1000)
      V(g)$color[V(g)%in% diffusers] = "red"
      plot(g,vertex.size=4, layout =layout.old,edge.arrow.size=0.2,vertex.label=NA )
      dev.off()
      
      toss = function(freq) {
            tossing = NULL
            for (i in 1:freq ) tossing[i] = 
                        sample(coins, 1, rep=TRUE, prob=probabilities)
            tossing = sum(tossing)
            return (tossing)
      }
      
      update_diffusers = function(diffusers){
            nearest_neighbors = data.frame(table(unlist(neighborhood(g, 1, diffusers))))
            nearest_neighbors = subset(nearest_neighbors, !(nearest_neighbors[,1]%in%diffusers))
            keep = unlist(lapply(nearest_neighbors[,2], toss))
            new_infected = as.numeric(as.character(nearest_neighbors[,1][keep >= 1]))
            class(new_infected) <- "igraph.vs"
            diffusers = unique(c(diffusers, new_infected))
            return(diffusers)
      }
      
      total_time = 1
      while(length(infected[[total_time]]) < node_number){ 
            infected[[total_time+1]] = sort(update_diffusers(infected[[total_time]]))
            cat(length(infected[[total_time+1]]), "-->")
            total_time = total_time + 1
      }
      
      ### Plot por periodo para reporte
      plot_time_series_graph = function(infected, m){
            num_cum = unlist(lapply(1:m, 
                                    function(x) length(infected[[x]]) ))
            p_cum = num_cum/node_number
            p = diff(c(0, p_cum))
            time = 1:m
            par(mfrow=c(1,2),mar=c(4,5,0.5,3),oma=c(0,0,2,0))#,mar=c(1,1,3,1)) # mar order;bottom, left, top and right
            # par(mgp=c(3,2,2)) # distancia de texto y area
            plot(p_cum~time, type = "b", 
                 ylab = "CDF", xlab = "Time",
                 xlim = c(0,total_time), ylim =c(0,1))
            plot(p~time, type = "h", frame.plot = FALSE,
                 ylab = "PDF", xlab = "Time",
                 xlim = c(0,total_time), ylim =c(0,1))
            title(main = sce, outer = T,line = 0) #outer=TRUE,
            
      }
      png(paste(path,sce,"_infected_sf.png", sep = ""),width = 800, height = 600)
      plot_time_series_graph(infected,length(infected))
      dev.off()
      
      
      #### Grabando la adopcion por periodo 
      plot_time_series = function(infected, m){
            num_cum = unlist(lapply(1:m, 
                                    function(x) length(infected[[x]]) ))
            p_cum = num_cum/node_number
            p = diff(c(0, p_cum))
            time = 1:m
            plot(p_cum~time, type = "b", 
                 ylab = "CDF", xlab = "Time",
                 xlim = c(0,total_time), ylim =c(0,1))
            plot(p~time, type = "h", frame.plot = FALSE,
                 ylab = "PDF", xlab = "Time",
                 xlim = c(0,total_time), ylim =c(0,1))
      }
      
      plot_gif = function(infected){
            m = 1
            while(m <= length(infected)){
                  layout(matrix(c(1, 2, 1, 3), 2,2, byrow = TRUE), widths=c(3,1), heights=c(1, 1))
                  V(g)$color = "white"
                  V(g)$color[V(g)%in%infected[[m]]] = "red"
                  plot(g, layout =layout.old, edge.arrow.size=0.2)
                  title(paste(sce, "\n Transmission Rate =", transmission_rate, ", Day", m))
                  plot_time_series(infected, m)
                  m = m + 1}
      }
      
      library(animation)
      
      saveGIF({
            ani.options(interval = 0.5, convert = 
                              shQuote("C:/Program Files/ImageMagick-7.0.4-Q16/convert.exe"))
            # start the plot
            plot_gif(infected)
      }, movie.name = paste(sce,"Difussion.gif",sep = ""),ani.width = 800, ani.height = 500)
      
      
      # yr<- length(infected)
      nodes<-list()
      ### extrayendo datos 
      for(i in 1:length(infected)){
            aa<- do.call(rbind,infected[i]) %>% as.data.frame(.)
            aa<- as.data.frame(aa)
            acum_nodes<- ncol(aa)
            nodes[i]<- acum_nodes
            
      }
      
      
      ### preparando datos de acumulacion de adopcion proveniendo de la Red 
      n<- rbind(nodes) %>% as.data.frame()
      n<- unlist(nodes)
      length(nodes)
      cfiles<- data.frame(yr=1:length(nodes), nodesAcum=n)
      cfiles$rate_adop<- (cfiles$nodesAcum/node_number)*100
      write.csv(cfiles, paste(path,sce,"_datos_adopt_sf.csv", sep = ""))
      rm(aa)
      
      # R options decilaes y notacion cientifica
      options(warn = -1)
      options(scipen = 999)
      
      
      ### Esta funcion ejecuta el modelo de excedentes economicos incorporando los impactos 
      ### importandos de la SNA
      source("C:/Users/CEGONZALEZ/Documents/GitHub/gfsf_project/_scripts/funcionSurplusEconomicModel.R")
      
      ### Creacion de diferentes escenarios de costos y rendimientos, todas las combinaciones posibles
      cm<- expand.grid(range_costos,range_yields)
      colnames(cm)[1]<- "Costos"
      colnames(cm)[2]<- "Rendimientos"
      num_comb<- nrow(cm) ### total de ejecuciones del modelo de excedentes 
      
      
      resul_sce<- list()
      ### Importando datos de SNA (a) y los periodos es los que se desarrolla (b)
      adop<- cfiles[,2]
      y<- cfiles[,1]
      y<- max(y)
      # 
      # i=1
      for(i in 1:nrow(cm)){
            #combinacion de rendimientos y costos
            combinations<- cm[i,]
            
            #runing model 
            m<- modeltest(prob_success =prob_success,
                          elas_supply =elas_supply,
                          change_yield = combinations$Rendimientos,
                          elas_demand =elas_demand ,
                          prod_prices =300 ,
                          input_cost_changes= combinations$Costos,
                          depre_rate = depre_rate ,
                          discount_rate =discount_rate ,
                          cre_exo =cre_exo ,
                          q =1800 ,
                          yr =y , 
                          adop= adop,
                          time_inves =6 ,
                          r_d_budget =5000000 )
            
            cat(paste("combination ", i, " it's ready\n", sep = ""))
            resul_sce[[i]]<- m
            
      }
      
      
      #### Extraer datos por combinacion o escenario modelado
      xxx<- lapply(1:num_comb, function(i){
            
            r_irr<- unique(resul_sce[[i]][,"irri"])
            v_vpn<- unique(resul_sce[[i]][,"npv"])
            yield<- unique(resul_sce[[i]][which(resul_sce[[i]]$Change_yield!=0),][,"Change_yield"])
            costo<- unique(resul_sce[[i]][which(resul_sce[[i]]$Change_cost_he!=0),][,"Change_cost_he"])
            data.frame(cost=costo,rendi=yield,tir=r_irr,vpn=v_vpn)
      })
      
      ### consolidacion de los resultados por todas las interacciones de los escenarios      
      consolidation<- do.call(rbind,xxx)
      write.csv(consolidation,paste(path,sce,"_consolidation.csv",sep="" ))
      
      ### representacion grafica 
      library(lattice)
      png(paste(path,sce,"_irr_combinatios_yield_cost.png", sep = ""),width = 800, height = 600)
      figura<- levelplot(tir ~ cost*rendi, data=consolidation  , 
                xlab="Change of Cost" , ylab="Change of yield",
                col.regions = heat.colors(100)[length(heat.colors(100)):1], 
                main=paste("Tasa Interna de Retorno (TIR)\nSNA(Scale Free) ", sce,sep = ""))
      plot(figura)
      dev.off()
      
      # return(consolidation)     
      
}


